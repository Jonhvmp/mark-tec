generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  userType  UserType @default(CONSUMER)
  name      String
  phone     String   @unique
  address   String
  city      String
  state     String
  isActive  Boolean  @default(true)
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLoginAt DateTime?
  loginAttempts Int @default(0)
  lockedUntil DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  refreshTokens RefreshToken[]
  userSessions UserSession[]
  auditLogs AuditLog[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  deviceId  String?
  deviceInfo Json?
  isRevoked Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  deviceInfo Json
  ipAddress String
  userAgent String
  isActive  Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("user_sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserType {
  CONSUMER
  TECHNICIAN
  ADMIN
}
